name: Launch and SSH into EC2 Instance 

on:
  push:
    branches:
      - release-aws  # Trigger the workflow on a push to the main branch

env:
  AWS_REGION: sa-east-1 

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      id: get_account_id
      run: |
        account_id=$(aws sts get-caller-identity --query Account --output text)
        echo "PART1=${account_id:0:4}" >> $GITHUB_ENV
        echo "PART2=${account_id:4:4}" >> $GITHUB_ENV
        echo "PART3=${account_id:8:4}" >> $GITHUB_ENV

    - name: Display AWS Account ID 
      run: |
        echo "AWS Account ID $PART1-$PART2-$PART3"

    - name: Create VPC
      id: create-vpc
      run: |
        vpc_id=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text)
        aws ec2 modify-vpc-attribute --vpc-id $vpc_id --enable-dns-support "{\"Value\":true}"
        aws ec2 modify-vpc-attribute --vpc-id $vpc_id --enable-dns-hostnames "{\"Value\":true}"
        echo "VPC_ID=$vpc_id" >> $GITHUB_ENV
        echo "::set-output name=VPC_ID::$vpc_id"

    - name: Create Security Group
      id: create-sg
      run: |
        sg_id=$(aws ec2 create-security-group --group-name my-sg --description "My security group" --vpc-id ${{ steps.create-vpc.outputs.VPC_ID }} --query 'GroupId' --output text)
        aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 22 --cidr 0.0.0.0/0
        aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 80 --cidr 0.0.0.0/0
        echo "SG_ID=$sg_id" >> $GITHUB_ENV
        echo "::set-output name=SG_ID::$sg_id"

    - name: Create Subnet
      id: create-subnet
      run: |
        subnet_id=$(aws ec2 create-subnet --vpc-id ${{ env.VPC_ID }} --cidr-block 10.0.1.0/24 --query 'Subnet.SubnetId' --output text)
        echo "Subnet ID: $subnet_id"
        echo "SUBNET_ID=$subnet_id" >> $GITHUB_ENV
        echo "::set-output name=SUBNET_ID::$subnet_id"

    - name: List available subnets
      run: aws ec2 describe-subnets --query 'Subnets[*].SubnetId' --output text

    - name: Create key pair
      id: create-keypair
      run: |
        KEY_NAME=my-github-actions-keypair-$RANDOM
        aws ec2 create-key-pair --key-name $KEY_NAME --query 'KeyMaterial' --output text > $KEY_NAME.pem
        chmod 600 $KEY_NAME.pem
        echo "KEY_NAME=$KEY_NAME" >> $GITHUB_ENV
        echo "KEY_FILE=$KEY_NAME.pem" >> $GITHUB_ENV    

    - name: Launch EC2 instance
      id: launch-instance
      run: |
        instance_id=$(aws ec2 run-instances \
          --image-id ami-01f25f0176d4db214 \
          --count 1 \
          --instance-type t4g.nano \
          --key-name ${{ env.KEY_NAME }} \
          --security-group-ids ${{ env.SG_ID }} \
          --subnet-id ${{ env.SUBNET_ID }} \
          --associate-public-ip-address \
          --query 'Instances[0].InstanceId' --output text)
        echo "Instance ID: $instance_id"
        echo "{INSTANCE_ID}={$instance_id}" >> $GITHUB_OUTPUT

    - name: Wait for instance to be running
      run: aws ec2 wait instance-running --instance-ids ${{ steps.launch-instance.outputs.INSTANCE_ID }}

    - name: Retrieve public IP
      id: get-ip
      run: |
        instance_ip=$(aws ec2 describe-instances --instance-ids ${{ steps.launch-instance.outputs.INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "Instance IP: $instance_ip"
        echo "{INSTANCE_IP}={$instance_IP}" >> $GITHUB_OUTPUT

    # - name: SSH into instance
    #   run: |
    #     ssh -o StrictHostKeyChecking=no -i ${{ env.KEY_FILE }} ec2-user@${{ steps.get-ip.outputs.INSTANCE_IP }} "echo 'SSH successful!'"

    - name: Sleep for 5 minutes
      id: delay
      run: sleep 300

    - name: Terminate EC2 Instance
      if: always()
      run: aws ec2 terminate-instances --instance-ids ${{ steps.launch-instance.outputs.INSTANCE_ID }}

    - name: Delete Subnet
      if: always()
      run: aws ec2 delete-subnet --subnet-id-id ${{ env.SUBNET_ID }}

    - name: Delete VPC
      if: always()
      run: aws ec2 delete-vpc --vpc-id ${{ env.VPC_ID }}

    - name: Delete Security Group
      if: always()
      run: aws ec2 delete-security-group --group-id ${{ env.SG_ID }}