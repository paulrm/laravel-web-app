name: Launch and SSH into EC2 Instance (copy web-us11)

on:
  push:
    branches:
      - release-aws  # Trigger the workflow on a push to the main branch

env:
  AWS_REGION: us-east-1 

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: List Instances with Security Groups and Subnets
      run: |
        aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId, SubnetId, SecurityGroups[*].GroupName]' --output table

    - name: Create key pair
      id: create-keypair
      run: |
        KEY_NAME=my-github-actions-keypair-$RANDOM
        aws ec2 create-key-pair --key-name $KEY_NAME --query 'KeyMaterial' --output text > $KEY_NAME.pem
        chmod 600 $KEY_NAME.pem
        echo "KEY_NAME=$KEY_NAME" >> $GITHUB_ENV
        echo "KEY_FILE=$KEY_NAME.pem" >> $GITHUB_ENV      

    - name: Launch EC2 instance
      id: launch-instance
      run: |
        instance_id=$(aws ec2 run-instances \
          --image-id ami-0a75bd84854bc95c9 \
          --count 1 \
          --instance-type t4g.nano \
          --key-name ${{ env.KEY_NAME }} \
          --security-group-ids sg-4472e322 \
          --subnet-id subnet-0362dfb8af06754f6 \
          --query 'Instances[0].InstanceId' --output text)
        echo "Instance ID: $instance_id"
        echo "{INSTANCE_ID}={$instance_id}" >> $GITHUB_OUTPUT

    - name: Tag the instance
      run: |
        aws ec2 create-tags \
          --resources ${{ steps.launch-instance.outputs.INSTANCE_ID }} \
          --tags Key=Name,Value=web-gravitron Key=Environment,Value=Production

    - name: Wait for instance to be running
      run: aws ec2 wait instance-running --instance-ids ${{ steps.launch-instance.outputs.INSTANCE_ID }}

    - name: Retrieve public IP
      id: get-ip
      run: |
        instance_ip=$(aws ec2 describe-instances --instance-ids ${{ steps.launch-instance.outputs.INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "Instance IP: $instance_ip"
        echo "{INSTANCE_IP}={$instance_IP}" >> $GITHUB_OUTPUT

    - name: SSH into instance
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ env.KEY_FILE }} ec2-user@${{ steps.get-ip.outputs.INSTANCE_IP }} "echo 'SSH successful!'"

    - name: Terminate EC2 Instance
      if: always()
      run: aws ec2 terminate-instances --instance-ids ${{ steps.launch-instance.outputs.INSTANCE_ID }}
